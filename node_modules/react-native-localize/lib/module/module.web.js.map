{"version":3,"sources":["module.web.js"],"names":["USES_FAHRENHEIT","USES_IMPERIAL","USES_RTL_LAYOUT","CURRENCIES","getLocaleFromLanguageTag","languageTag","countryCodeFallback","splitted","split","languageCode","countryCode","isRTL","includes","generateConstants","languageTags","base","currencies","locales","numberFormatter","Intl","NumberFormat","dateFormatter","DateTimeFormat","hour","forEach","locale","currency","find","_","push","numberSeparators","format","replace","numberFormatSettings","decimalSeparator","length","groupingSeparator","eveningDate","Date","uses24HourClock","match","calendar","country","temperatureUnit","timeZone","resolvedOptions","usesMetricSystem","handlers","Set","constants","navigator","languages","window","addEventListener","handler"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  USES_FAHRENHEIT,\n  USES_IMPERIAL,\n  USES_RTL_LAYOUT,\n  CURRENCIES,\n} from \"./constants\";\n\nimport type { Locale, LocalizationConstants } from \"./types\";\n\nfunction getLocaleFromLanguageTag(\n  languageTag: string,\n  countryCodeFallback: string,\n): Locale {\n  const splitted = languageTag.split(\"-\");\n  const languageCode = splitted[0];\n\n  if (splitted[1] === \"419\") {\n    splitted[1] = \"UN\"; // overwrite Latin America and Caribbean region\n  }\n\n  const countryCode = splitted[1] || countryCodeFallback;\n\n  return {\n    languageCode: languageCode,\n    countryCode,\n    languageTag: `${languageCode}-${countryCode}`,\n    isRTL: USES_RTL_LAYOUT.includes(languageCode),\n  };\n}\n\nfunction generateConstants(\n  languageTags: $ReadOnlyArray<string>,\n): LocalizationConstants {\n  const base = getLocaleFromLanguageTag(languageTags[0], \"US\");\n\n  const currencies: string[] = [];\n  const locales: Locale[] = [];\n\n  const numberFormatter = new Intl.NumberFormat(base.languageTag);\n  const dateFormatter = new Intl.DateTimeFormat(base.languageTag, {\n    hour: \"numeric\",\n  });\n\n  languageTags.forEach(languageTag => {\n    const locale = getLocaleFromLanguageTag(languageTag, base.countryCode);\n    const currency = CURRENCIES[locale.countryCode] || \"USD\";\n\n    if (!locales.find(_ => _.languageTag === locale.languageTag)) {\n      locales.push(locale);\n    }\n    if (!currencies.includes(currency)) {\n      currencies.push(currency);\n    }\n  });\n\n  const numberSeparators = [\n    ...numberFormatter.format(1000000.1).replace(/\\d/g, \"\"),\n  ];\n  const numberFormatSettings = {\n    decimalSeparator: numberSeparators[numberSeparators.length - 1],\n    groupingSeparator: numberSeparators[0],\n  };\n\n  const eveningDate = new Date(2000, 0, 1, 20);\n  const uses24HourClock = !!dateFormatter.format(eveningDate).match(/am|pm/i);\n\n  return {\n    calendar: \"gregorian\",\n    country: base.countryCode,\n    currencies,\n    locales,\n    numberFormatSettings,\n    temperatureUnit: USES_FAHRENHEIT.includes(base.countryCode)\n      ? \"fahrenheit\"\n      : \"celsius\",\n    timeZone: dateFormatter.resolvedOptions().timeZone || \"Etc/UTC\",\n    uses24HourClock,\n    usesMetricSystem: !USES_IMPERIAL.includes(base.countryCode),\n  };\n}\n\nexport const handlers: Set<Function> = new Set();\nexport let constants: LocalizationConstants = generateConstants(\n  navigator.languages,\n);\n\nwindow.addEventListener(\"languagechange\", () => {\n  constants = generateConstants(navigator.languages);\n  handlers.forEach(handler => handler());\n});\n"]}